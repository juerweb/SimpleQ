@using SimpleQ.Webinterface.App_LocalResources
@model SimpleQ.Webinterface.Models.ViewModels.SurveyResultsModel

<div class="row pl-5 mt-1">
    <h2>@Resources.surveyResultsHeader</h2>
</div>

<div class="row">
    @* Switch betwenn result of single survey of result of multiple ones *@
    <div class="col-lg-6 pl-5 pr-5">
        <div class="row">
            <div class="col-6 pr-0">
                <button id="trendBtn" onclick="switchToMulti()" class="btn btn-primary btn-block">Trend (per Kategorie)</button>
            </div>
            <div class="col-6 pl-0">
                <button id="singleBtn" onclick="switchToSingle()" class="btn btn-secondary btn-block">Einzelumfrage</button>
            </div>
        </div>
    </div>

</div>
<div class="row mt-1">
    <div class="col-md-5 pl-5 pr-5">
        <div id="singleResultOptions">
            <label for="Surveys">Umfrage</label>
            @Html.DropDownListFor(model => model.Surveys, new SelectList(Model.Surveys, "SvyId", "SvyText"), new { @class = "form-control" })
        </div>
        <div id="multiResultOptions">
            <label for="SurveyCategoryCB">@Resources.surveyCategoryHeader</label>
            @Html.DropDownListFor(model => model.SurveyCategories, new SelectList(Model.SurveyCategories, "CatId", "CatName"), new { @class = "form-control" })
            <div class="row mt-2">
                <div class="col-md-6">
                    <div class="form-group mb-0">
                        <label for="timeFrom">@Resources.from</label>
                        @*<input type="time" class="form-control" id="timeFrom">*@
                        <input type="date" class="form-control" id="dateFrom">
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group mb-0">
                        <label for="timeTwo">@Resources.to</label>
                        @*<input type="time" class="form-control" id="timeTo">*@
                        <input type="date" class="form-control" id="dateTo">
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-7" id="singleResultPartial">
        @Html.Partial("~/Views/SurveyResults/_SingleResult.cshtml")
    </div>
    <div class="col-md-7" id="multiResultPartial">
        @Html.Partial("~/Views/SurveyResults/_MultiResult.cshtml")
    </div>
</div>
<hr />
<div class="row pr-5 pl-5">
    <div class="col-md-6 chartCol" id="chart1Col">
        <canvas id="chart1" width="800" height="500"></canvas>
    </div>
    <div class="col-md-6 chartCol" id="chart2Col">
        <canvas id="chart2" width="800" height="500"></canvas>
    </div>
</div>

<!-- The Modal -->
<div id="zoomModal" class="myModal">

    <!-- Modal content -->
    <div class="myModal-content">
        <button class="btn btn-danger btn-block mt-2" onclick="closeZommModal()">Close</button>
        <div id="zoomModalContent">
            <canvas id="chart1" width="800" height="500"></canvas>
        </div>
        <button class="btn btn-danger btn-block mt-2" onclick="closeZommModal()">Close</button>
    </div>

</div>

<script>

    function loadSingleResultAsync() {
        //$("#result").load(@Url.Action() + "?svyId=" + selectedID);
    }

    //all colors, repeat when there are many answer possibilities
    var borderColors = [
        'rgba(255, 99, 132, 1)',
        'rgba(54, 162, 235, 1)',
        'rgba(255, 206, 86, 1)',
        'rgba(75, 192, 192, 1)',
        'rgba(153, 102, 255, 1)',
        'rgba(255, 159, 64, 1)'
    ];
    var bgColors = [
        'rgba(255, 99, 132, 0.2)',
        'rgba(54, 162, 235, 0.2)',
        'rgba(255, 206, 86, 0.2)',
        'rgba(75, 192, 192, 0.2)',
        'rgba(153, 102, 255, 0.2)',
        'rgba(255, 159, 64, 0.2)'
    ];


    function changeChartSingle(selector, chartCol,chart) {
        if ((document.getElementById(selector).value === "listing")) {
            createListing(chartCol);
            return;
        }
        var keys = [];
        var values = [];
        for (i = 0; i < dict.length; i++) {
            keys.push(dict[i].key);
            values.push(dict[i].value);
        }


        while (dict.length > borderColors.length) { //ensures, that there are enough colors
            borderColors = borderColors.concat([
                'rgba(255, 99, 132, 1)',
                'rgba(54, 162, 235, 1)',
                'rgba(255, 206, 86, 1)',
                'rgba(75, 192, 192, 1)',
                'rgba(153, 102, 255, 1)',
                'rgba(255, 159, 64, 1)'
            ]);
            bgColors = bgColors.concat([
                'rgba(255, 99, 132, 0.2)',
                'rgba(54, 162, 235, 0.2)',
                'rgba(255, 206, 86, 0.2)',
                'rgba(75, 192, 192, 0.2)',
                'rgba(153, 102, 255, 0.2)',
                'rgba(255, 159, 64, 0.2)'
            ]);
        }

        document.getElementById(chartCol).innerHTML = '<canvas id="'+chart+'" width="800" height="500"></canvas>'; //you have to clean everything up, otherwise the chart is bugging around
        var canvas = document.getElementById(chart);
        var ctx = canvas.getContext('2d');
        var myChart = new Chart(ctx, {
            type: document.getElementById(selector).value,
            data: {
                labels: keys,
                datasets: [{
                    label: '# of Votes',
                    data: values,
                    backgroundColor: bgColors,
                    borderColor: borderColors,
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }
        });
    }

    function createListing(chart) {
        //alert();
        var answerCount = 0;
        for (i = 0; i < dict.length; i++) {
            answerCount += parseInt(dict[i].value);
        }
        document.getElementById(chart).innerHTML = "";
        var injection = "";

        for (i = 0; i < dict.length; i++) {
            injection += ("<tr><td>" + dict[i].key + "</td><td>" + dict[i].value + "</td><td>" + ((dict[i].value / answerCount) * 100).toFixed(2) + "</td></tr>");
        }

        $("#" + chart).append("<table class='table table-bordered'><thead><tr><th>@Resources.answer</th><th>@Resources.count</th><th>@Resources.percent</th></tr></thead><tbody>" + injection + "</tbody></table>");
    }

    //modal things
    //   |    Everything down here
    //   v


    $(document).ready(function () {
        $(".chartCol").click(function (event) {
            if (event.target.id === "chart1" || event.target.id === "chart1Col" || event.target.parentElement.parentElement.parentElement.parentElement.id === "chart1Col") {
                changeChartSingle("chart1SelectSingle", "zoomModalContent", "modalChart");
            } else if (event.target.id === "chart2" || event.target.id === "chart2Col" || event.target.parentElement.parentElement.parentElement.parentElement.id === "chart2Col") {
                changeChartSingle("chart2SelectSingle", "zoomModalContent", "modalChart");
            }
            var modal = document.getElementById('zoomModal');
            modal.style.display = "block";
        });
    });

    function closeZommModal() {
        var modal = document.getElementById('zoomModal');
        modal.style.display = "none";
    }

</script>



