@using SimpleQ.Webinterface.Models;
@using System.Resources;
@using SimpleQ.Webinterface.Properties;
@using SimpleQ.Webinterface.Models.ViewModels;

@model SimpleQ.Webinterface.Models.ViewModels.SurveyResultsModel
@{
    /**/

    ResourceManager rm = Resources.ResourceManager;
}
<div class="row ml-0 mr-0">
    <div id="exportNotValidBecauseEmpty" class="alert alert-danger w-100" style="display:none"><strong>@Resources.EmptyResultsExport</strong></div>

    <div style="overflow-x:auto;" class="m-3 w-100">
        <table id="resultsTable" class="table table-bordered table-striped smallCellPadding small w-100">
            <thead>
                <tr>
                    <th>@Resources.survey</th>
                    <th>@Resources.count</th>
                    <th>@Resources.surveyCategoryHeader</th>
                    <th>@Resources.answerTypeHeader</th>
                    <th>@Resources.timespan</th>
                    <th>@Resources.groups</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @{
                    foreach (SurveyResultsModel.SurveyResultWrapper srw in Model.Surveys)
                    {
                        <tr>
                            <td>@srw.SvyText</td>
                            <td>@srw.Amount</td>
                            <td catId="@srw.SurveyCategory.CatId">@srw.SurveyCategory.CatName</td>
                            <td typeId="@srw.AnswerType.TypeId">@rm.GetString(srw.AnswerType.TypeDesc)</td>
                            <td>@srw.StartDate.ToShortDateString() - @srw.EndDate.ToShortDateString()</td>
                            <td>
                                @foreach (string s in srw.Departments)
                                {
                                    if (s != srw.Departments.Last())
                                    {
                                        @s@:,
                                    }
                                    else
                                    {
                                        @s
                                    }
                                }
                            </td>
                            <td><button class="btn btn-primary" onclick="evaluateResults(this.parentElement.parentElement,this.parentElement.parentElement.children[0].innerHTML, @srw.Amount, @srw.AnswerType.TypeId)">@Resources.evaluate</button></td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>


<div>
    <h2 class="text-center" id="actualSvyText"></h2>
</div>

<div class="mt-2" id="singleResultPartial"></div>
<div class="mt-2" id="multiResultPartial"></div>

<div id="chartRow" class="row pr-2 pl-2 ml-0 mr-0">
    <div class="col-md-6 chartCol" id="chart1Col">
        <canvas id="chart1"></canvas>
    </div>
    <div class="col-md-6 chartCol" id="chart2Col">
        <canvas id="chart2"></canvas>
    </div>
</div>

<div id="freeTextDiv">

</div>

<!-- The Modal -->
<div id="zoomModal" class="myModal">
    <!-- Modal content -->
    <div id="myModalContent" class="myModal-content">
        <button class="btn btn-danger btn-block mt-2" onclick="closeZoomModal()">@Resources.close</button>
        <div id="zoomModalContent">
            <canvas id="chart1" width="800" height="500"></canvas>
        </div>
        <button class="btn btn-danger btn-block mt-2" onclick="closeZoomModal()">@Resources.close</button>
    </div>
</div>


<div class="modal" id="singleOrMultiModal">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@Resources.singleOrTrendEvaluation</h4>
            </div>

            <!-- Modal body -->
            <div class="modal-body">
                <div class="row">
                    <div class="col-6">
                        <button type="button" class="btn btn-primary btn-block" onclick="loadSingleResultAsync();" data-dismiss="modal" data-toggle="tooltip" title="@Resources.singleButtonTooltip">@Resources.singleEvaluation</button>
                    </div>
                    <div class="col-6">
                        <button type="button" class="btn btn-primary btn-block" onclick="loadMultiResultAsync();" data-dismiss="modal" data-toggle="tooltip" title="@Resources.trendButtonTooltip">@Resources.trendEvaluation</button>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>


<div class="modal" id="exportModal">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@Resources.ExportResults</h4>
            </div>

            <!-- Modal body -->
            <div class="modal-body">
                <div class="row">
                    <div class="col-6">
                        <button type="button" class="btn btn-primary btn-block d-flex justify-content-between" onclick="exportAsCSV()" data-dismiss="modal"><a>Excel</a><img style="right:0;height:24px; width:24px;" src="https://img.icons8.com/office/26/000000/csv.png" /></button>
                    </div>
                    <div class="col-6">
                        <button type="button" class="btn btn-primary btn-block d-flex justify-content-between" onclick="exportAsPDF()" data-dismiss="modal" data-toggle="tooltip">PDF<img style="height:24px; width:24px;" src="http://wwwimages.adobe.com/content/dam/acom/en/legal/images/badges/Adobe_PDF_file_icon_32x32.png" /></button>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>

<div class="modal" id="notYetImplementedModal">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@Resources.NotImplementedYet</h4>
            </div>
        </div>
    </div>
</div>



<script>
    var freeText = false;
    var languageDict = {};
    if (resultType == undefined) {
        var resultType = "multi";
    }

    let actualSvyText = "";
    let actualTableElement;

    let selectedSingleSurveyId = 0;

    $(function () {

        var table = $('#resultsTable').dataTable({
            "scrollY": "400px",
            "scrollCollapse": true,
            "dom": 'rt',
            "order": [[4, "desc"]],
            "columnDefs": [
                {"orderable": false, "targets": 6}
            ],
            "paging": false
        });
        $('.dataTables_length').addClass('bs-select');

        $('[data-toggle="tooltip"]').tooltip();


        $(window).resize(function () {
            table.fnAdjustColumnSizing();
        });


        //document.getElementById("header").innerHTML = "@Resources.surveyResultsHeader"; //set Header

        let tops = document.getElementsByClassName("header");
        tops[0].innerHTML = "@Resources.surveyResultsHeader";
        tops[1].innerHTML = "@Resources.surveyResultsHeader";

    });


    function evaluateResults(elem, svyText, amount, typeId) {
        selectedSingleSurveyId = 0;
        actualSvyText = svyText;
        actualTableElement = elem;
        if (amount > 1 && typeId !== 4) {
            $("#singleOrMultiModal").modal({ backdrop: true });
        } else {
            loadSingleResultAsync();
        }
    }



    function loadSingleResultAsync() {
        //console.log(actualSvyText);
        let url = "@Url.Action("LoadSingleResult", "SurveyResults")" + "?svyText=" + encodeURI(actualSvyText);


        $.ajax({
            url,
            success: function (data) {
                $("#singleResultPartial").html(data);
                $("#previousSurveyButton").prop("disabled", true);
                $("#nextSurveyButton").prop("disabled", true);
                if (dicts.length > 1) {
                    $("#nextSurveyButton").prop("disabled", false);
                }
                updateSingleResultDate();
                $("#multiResultPartial").hide();
                $("#singleResultPartial").show();
                if (freeText) {
                    $("#singleChartOptions").hide();
                    $("#chartRow").hide();
                    showFreeTextAnsers();
                    $("#freeTextDiv").show();
                } else {
                    $("#singleChartOptions").show();
                    $("#chartRow").show();
                    $("#freeTextDiv").hide();
                }
            }
        });
    }


    function loadMultiResultAsync() {
        let svyText = encodeURI(actualSvyText);
        let catId = actualTableElement.children[2].getAttribute("catId");
        let typeId = actualTableElement.children[3].getAttribute("typeId");

        let url = "@Url.Action("LoadMultiResult", "SurveyResults")" + "?svyText=" + svyText + "&catId=" + catId + "&typeId=" + typeId;

        $.ajax({
            url,
            success: function (data) {
                $("#multiResultPartial").html(data);
                $("#singleResultPartial").hide();
                $("#multiResultPartial").show();
                $("#chartRow").show();
                $("#freeTextDiv").hide();
            }
        });
    }


    function showNextSurvey() {
        selectedSingleSurveyId++;
        updateSingleResultDate();
        showSingleCharts();
        if (selectedSingleSurveyId == dicts.length-1) {
            $("#nextSurveyButton").prop("disabled", true);
        }
        $("#previousSurveyButton").prop("disabled", false);
    }

    function showPreviousSurvey() {
        selectedSingleSurveyId--;
        updateSingleResultDate();
        showSingleCharts();
        if (selectedSingleSurveyId == 0) {
            $("#previousSurveyButton").prop("disabled", true);
        }
        $("#nextSurveyButton").prop("disabled", false);
    }


    function updateSingleResultDate() {
        document.getElementById("actualSvyText").innerHTML = dicts[selectedSingleSurveyId].svyText;
        document.getElementById("singleResultDate").innerHTML = dicts[selectedSingleSurveyId].date;
    }

            function showMultiCharts() {
                changeChartMulti('chart1SelectMulti', 'chart1Col', 'chart1');
                changeChartMulti('chart2SelectMulti', 'chart2Col', 'chart2');
            }

            function showSingleCharts() {
                changeChartSingle('chart1SelectSingle', 'chart1Col', 'chart1');
                changeChartSingle('chart2SelectSingle', 'chart2Col', 'chart2');
            }

            //all colors, repeat when there are many answer possibilities
            var borderColors = [
                'rgba(255, 99, 132, 1)',
                'rgba(54, 162, 235, 1)',
                'rgba(255, 206, 86, 1)',
                'rgba(75, 192, 192, 1)',
                'rgba(153, 102, 255, 1)',
                'rgba(255, 159, 64, 1)'
            ];
            var bgColors = [
                'rgba(255, 99, 132, 0.4)',
                'rgba(54, 162, 235, 0.4)',
                'rgba(255, 206, 86, 0.4)',
                'rgba(75, 192, 192, 0.4)',
                'rgba(153, 102, 255, 0.4)',
                'rgba(255, 159, 64, 0.4)'
            ];

            function getRandomColor() {
                var part1 = Math.floor(Math.random() * 256);
                var part2 = Math.floor(Math.random() * 256);
                var part3 = Math.floor(Math.random() * 256);
                if (part1 > 140 && part2 > 140 && part3 > 140) {
                    getRandomColor();
                } else if (part1 < 70 && part2 < 70 && part3 < 70) {
                    getRandomColor();
                }
                return 'rgba(' + part1 + ', ' + part2 + ', ' + part3;
            }

            //single chart things
            //   v

            function changeChartSingle(selector, chartCol, chart) {
                if ((document.getElementById(selector).value === "listing")) {
                    createSingleListing(chartCol);
                    return;
                }
                var keys = [];
                var values = [];

                let id = selectedSingleSurveyId;
                for (i = 0; i < dicts[id].dict.length; i++) {
                    keys.push(dicts[id].dict[i].key);
                    values.push(dicts[id].dict[i].value);
                }

                while (dicts[id].dict.length > borderColors.length) { //ensures, that there are enough colors
                                                            //alert("drinn");
                    var firstPart = getRandomColor();
                    borderColors = borderColors.concat([(firstPart + ',1)')]);
                    bgColors = bgColors.concat([(firstPart + ',0.4)')]);
                    //alert(firstPart + ',1)');
                }

                var chartType = document.getElementById(selector).value;
                document.getElementById(chartCol).innerHTML = '<canvas id="' + chart + '" width="800" height="500"></canvas>'; //you have to clean everything up, otherwise the chart is bugging around
                var canvas = document.getElementById(chart);
                var ctx = canvas.getContext('2d');

                var pluginFontSize = 15;
                if (window.screen.width < 500) {
                    pluginFontSize = 10;
                }

                if (chartType === "radar") {
                    var myRadarChart = new Chart(ctx, {
                type: chartType,
                data: {
                        labels: keys,
                    datasets: [{
                            label: '# of Votes',
                        data: values,
                        backgroundColor: bgColors,
                        borderColor: borderColors,
                        borderWidth: 1
                    }]
                }
                });
            } else if (chartType === "doughnut" || chartType === "polarArea") {

            var myPieChart = new Chart(ctx, {
                type: chartType,
                data: {
                    labels: keys,
                    datasets: [{
                        label: '# of Votes',
                        data: values,
                        backgroundColor: bgColors,
                        borderColor: borderColors,
                        borderWidth: 1
                    }]
                },
                options: {
                    plugins: {
                        labels: {
                            // render 'label', 'value', 'percentage', 'image' or custom function, default is 'percentage'
                            render: 'value',
                            // precision for percentage, default is 0
                            precision: 0,
                            // identifies whether or not labels of value 0 are displayed, default is false
                            showZero: true,
                            // font size, default is defaultFontSize
                            fontSize: pluginFontSize,
                            // font color, can be color array for each data or function for dynamic color, default is defaultFontColor
                            fontColor: '#000000',
                            // font style, default is defaultFontStyle
                            fontStyle: 'normal',
                            // font family, default is defaultFontFamily
                            fontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                            // draw text shadows under labels, default is false
                            textShadow: true,
                            // text shadow intensity, default is 6
                            shadowBlur: 10,
                            // text shadow X offset, default is 3
                            shadowOffsetX: -5,
                            // text shadow Y offset, default is 3
                            shadowOffsetY: 5,
                            // text shadow color, default is 'rgba(0,0,0,0.3)'
                            shadowColor: 'rgba(255,0,0,0.75)',
                            // draw label in arc, default is false
                            arc: true,
                            // position to draw label, available value is 'default', 'border' and 'outside'
                            // default is 'default'
                            position: 'default',
                            // draw label even it's overlap, default is true
                            overlap: true,
                            // show the real calculated percentages from the values and don't apply the additional logic to fit the percentages to 100 in total, default is false
                            showActualPercentages: true,
                            // add padding when position is `outside`
                            // default is 2
                            outsidePadding: 4,
                            // add margin of text when position is `outside` or `border`
                            // default is 2
                            textMargin: 4
                        }
                    }
                }
            });
        } else {
            var myChart = new Chart(ctx, {
                type: chartType,
                data: {
                    labels: keys,
                    datasets: [{
                        label: '# of Votes',
                        data: values,
                        backgroundColor: bgColors,
                        borderColor: borderColors,
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true
                            }
                        }]
                    }
                }
            });
        }
    }


    function createSingleListing(chart) {
        let answerCount = 0;
        let id = selectedSingleSurveyId;

        for (i = 0; i < dicts[id].dict.length; i++) {
            answerCount += parseInt(dicts[id].dict[i].value);
        }
        document.getElementById(chart).innerHTML = "";
        var injection = "";

        for (i = 0; i < dicts[id].dict.length; i++) {
            injection += ("<tr><td>" + dicts[id].dict[i].key + "</td><td>" + dicts[id].dict[i].value + "</td><td>" + ((dicts[id].dict[i].value / answerCount) * 100).toFixed(2) + "%</td></tr>");
        }
        $("#" + chart).append("<table class='table table-bordered'><thead><tr><th>@Resources.answer</th><th>@Resources.count</th><th>@Resources.percent</th></tr></thead><tbody>" + injection + "</tbody></table>");
    }


    function showFreeTextAnsers() {
        let id = selectedSingleSurveyId;
        let injection = "";
        for (i = 0; i < dicts[id].dict.length; i++) {
            injection += '<tr><td>' + dicts[id].dict[i] + '</td></tr>';
        }

        document.getElementById("freeTextDiv").innerHTML = "<table class='table table-bordered'><thead><tr><th>@Resources.answer</th></tr></thead><tbody>" + injection + "</tbody></table>";
    }


    var dateIndex = 0;
    function zoomChart(id) {
        switch (id) {
            case "chart1SelectSingle":
                changeChartSingle("chart1SelectSingle", "zoomModalContent", "modalChart");
                break;
            case "chart2SelectSingle":
                changeChartSingle("chart2SelectSingle", "zoomModalContent", "modalChart");
                break;
            case "chart1SelectMulti":
                changeChartMulti("chart1SelectMulti", "zoomModalContent", "modalChart");
                break;
            case "chart2SelectMulti":
                changeChartMulti("chart2SelectMulti", "zoomModalContent", "modalChart");
                break;
            default:
                console.log("Invalid chart type!");
                return;
        }
        var modal = document.getElementById('zoomModal');
        modal.style.display = "block";
    }


    //modal things
    //   |    Everything down here
    //   v

    $(document).ready(function () {

        $("#zoomModal").click(function (event) {
            if (event.target.id === "zoomModal") {
                closeZoomModal();
            }
        });
        //$("#exportModal").click(function (event) {
        //    if (event.target.id === "exportModal") {
        //        $("#exportModal").hide();
        //    }
        //});
        //$("#notYetImplementedModal").click(function (event) {
        //    if (event.target.id === "notYetImplementedModal") {
        //        $("#notYetImplementedModal").hide();
        //    }
        //});

        $("#zoomModalContent").click(function (event) {
            if (event.target.id === "dateRightModalBtn") { //for multiResult listing (to be able to switch dates)
                dateIndex += 1;
                createMultiListing(event.target.parentElement.parentElement.parentElement.id, dateIndex, "dateLeftModalBtn", "dateRightModalBtn");
                $("#dateLeftModalBtn").prop("disabled", false);
                if (dateIndex === multiLabels.length - 1) {
                    $("#dateRightModalBtn").prop("disabled", true);
                }
                return;
            }
            if (event.target.id === "dateLeftModalBtn") { //for multiResult listing (to be able to switch dates)
                dateIndex -= 1;
                createMultiListing(event.target.parentElement.parentElement.parentElement.id, dateIndex, "dateLeftModalBtn", "dateRightModalBtn");
                $("#dateRightModalBtn").prop("disabled", false);
                if (dateIndex === 0) {
                    $("#dateLeftModalBtn").prop("disabled", true);
                } else {
                    $("#dateLeftModalBtn").prop("disabled", false);
                }
                return;
            }
        });
        $(".chartCol").click(function (event) {
            if (event.target.id === "dateRightBtn") { //for multiResult listing (to be able to switch dates)
                dateIndex += 1;
                createMultiListing(event.target.parentElement.parentElement.parentElement.id, dateIndex, "dateLeftBtn", "dateRightBtn");
                $("#dateLeftBtn").prop("disabled", false);
                if (dateIndex === multiLabels.length - 1) {
                    $("#dateRightBtn").prop("disabled", true);
                }
                return;
            }
            if (event.target.id === "dateLeftBtn") { //for multiResult listing (to be able to switch dates)
                dateIndex -= 1;
                createMultiListing(event.target.parentElement.parentElement.parentElement.id, dateIndex, "dateLeftBtn", "dateRightBtn");
                $("#dateRightBtn").prop("disabled", false);
                if (dateIndex === 0) {
                    $("#dateLeftBtn").prop("disabled", true);
                } else {
                    $("#dateLeftBtn").prop("disabled", false);
                }
                return;
            }
        });
    });

    function closeZoomModal() {
        var modal = document.getElementById('zoomModal');
        modal.style.display = "none";
    }

    //multi chart things
    //   |    Everything down here
    //   v

    function changeChartMulti(selector, chartCol, chart) {
        document.getElementById("actualSvyText").innerHTML = multiSvyText;

        if ((document.getElementById(selector).value === "listing")) {
            if (chartCol === "zoomModalContent") {
                createMultiListing(chartCol, dateIndex, "dateLeftModalBtn", "dateRightModalBtn");
            } else {
                createMultiListing(chartCol, 0, "dateLeftBtn", "dateRightBtn");
            }
            return;
        }

        //alert(multiDict.length + " " + borderColors.length);
        while (multiDict.length > borderColors.length) { //ensures, that there are enough colors
            var firstPart = getRandomColor();
            borderColors = borderColors.concat([(firstPart + ',1)')]);
            bgColors = bgColors.concat([(firstPart + ',0.4)')]);
        }

        var chartType = document.getElementById(selector).value;
        document.getElementById(chartCol).innerHTML = '<canvas id="' + chart + '" width="800" height="500"></canvas>'; //you have to clean everything up, otherwise the chart is bugging around
        var canvas = document.getElementById(chart);
        var ctx = canvas.getContext('2d');

        let datasets = [];

        if (chartType === "bar") {

            datasets = createDatasets(true);

            var stackedBar = new Chart(ctx, {
                type: chartType,
                data: {
                labels: multiLabels,
                    datasets: datasets
                },
                options: {
                scales: {
                    xAxes: [{
                        stacked: true
                        }],
                        yAxes: [{
                        stacked: true
                        }]
                    }
            }
        });
    } else if (chartType === "line") {

             datasets = createDatasets(false);

    var myMultiLineChart = new Chart(ctx, {

        type: chartType,
        data: {

            labels: multiLabels,
            datasets: datasets
                },
                options: {

                }
            });
        }
    }


    function createDatasets(withBackground) {
        var datasets = [];
        if (withBackground) {
            for (i = 0; i < multiDict.length; i++) {
                //if (checkedAnswers.includes(multiDict[i].key)) {
                datasets.push({
                    label: multiDict[i].key,
                        data: multiDict[i].value,
                        borderColor: borderColors[i],
                        backgroundColor: bgColors[i],
                        borderWidth: 1
                    });
            //}
        }
    } else {
            for (i = 0; i < multiDict.length; i++) {
                //if (checkedAnswers.includes(multiDict[i].key)) {
                    datasets.push({
                        label: multiDict[i].key,
                        data: multiDict[i].value,
                        borderColor: borderColors[i],
                        backgroundColor: 'rgba(255,0,0,0)',
                        borderWidth: 1
                    });
                //}
            }
        }
        return datasets;
    }


    function createMultiListing(chartCol, dateIndex, buttonLeftId, buttonRightId) {
        var answerCount = 0;
        //alert(multiDict.length + " " + dateIndex);
        for (i = 0; i < multiDict.length; i++) {
            answerCount += multiDict[i].value[dateIndex];
        }
        document.getElementById(chartCol).innerHTML = "";
        var injection = "";

        injection += '<div class="row"> <div class="col-3"><button id="' + buttonLeftId + '" class="btn btn-primary btn-block"> < </button></div> <div class="col-6"><h3 class="text-center">' + multiLabels[dateIndex] + '</h3></div> <div class="col-3"><button id="' + buttonRightId + '" class="btn btn-primary  btn-block"> > </button></div> </div>';

        //injection += '<button class="btn btn-primary" style="float:left;"> < </button>';

        for (i = 0; i < multiDict.length; i++) {
            injection += ("<tr><td>" + multiDict[i].key + "</td><td>" + multiDict[i].value[dateIndex] + "</td><td>" + ((multiDict[i].value[dateIndex] / answerCount) * 100).toFixed(2) + "%</td></tr>");
        }
        $("#" + chartCol).append("<table class='table table-bordered'><thead><tr><th>@Resources.answer</th><th>@Resources.count</th><th>@Resources.percent</th></tr></thead><tbody>" + injection + "</tbody></table>");

        if (dateIndex === 0) {
            $("#" + buttonLeftId).prop("disabled", true);
        } else if (dateIndex === multiLabels.length - 1) {
            $("#" + buttonRightId).prop("disabled", true);
        }
    }

    var exportType = "";

    function exportChart(type) {
        //$("#exportModal").show();
        $("#exportModal").modal({ backdrop: true });
        exportType = type;
    }

    function notYetImplemented() {
        $("#notYetImplementedModal").modal({ backdrop: true });
    }

    function exportAsCSV() {
        let title = document.getElementById("actualSvyText").innerHTML;

        let csv = 'Ergebnisse;' + title + '\n\n';

        if (exportType === "single") {
            let resultCount = 0; //if it stays 0 there are no answers
            for (i = 0; i < dicts.length; i++) {
                csv += dicts[i].date;
                csv += '\n';                  
                for (j = 0; j < dicts[i].dict.length; j++) {
                    csv += dicts[i].dict[j].key;
                    csv += ';';
                    csv += dicts[i].dict[j].value;
                    csv += '\n';
                    resultCount++;
                }    
                csv += '\n';
            }
            if (resultCount == 0) {
                $("#exportNotValidBecauseEmpty").show();
                $('#exportNotValidBecauseEmpty').delay(3000).fadeOut();
                return;
            }
        } else {
            csv += ' ;';
            for (i = 0; i < multiLabels.length; i++) {
                csv += multiLabels[i];
                csv += ';';
            }
            csv += '\n';

            let resultCount = 0; //if it stays 0 there are no answers
            for (i = 0; i < multiDict.length; i++) {
                csv += multiDict[i].key;
                csv += ';';
                console.log(multiDict[i].value);
                for (j = 0; j < multiDict[i].value.length; j++) {
                    csv += multiDict[i].value[j];
                    csv += ';';
                    resultCount += multiDict[i].value[j];
                }
                csv += '\n';
            }
            if (resultCount == 0) {
                $("#exportNotValidBecauseEmpty").show();
                $('#exportNotValidBecauseEmpty').delay(3000).fadeOut();
                return;
            }
        }

        let hiddenElement = document.createElement('a');
        hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(csv);
        hiddenElement.target = '_blank';
        hiddenElement.download = title + '.csv';
        hiddenElement.click();
    }

    function exportAsPDF() {
        notYetImplemented();
    }

</script>

