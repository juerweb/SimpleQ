@using SimpleQ.Webinterface.Properties;
@using SimpleQ.Webinterface.Models;
@model SimpleQ.Webinterface.Models.ViewModels.GroupAdministrationModel

<div class="row pl-4 mt-1 ml-0 mr-0">
    <h2>@Resources.groupAdministrationHeader</h2>
</div>
@using (Html.BeginForm("SendInvitations", "GroupAdministration"))
{ 
    <div class="row mt-1 pl-3 ml-0 mr-0">
        <div id="col1" class="col-md-4 pr-0">
            <h4 class="text-center">Gruppenauswahl</h4>
            <div class="form-group mt-2 mb-1">
                <label for="groups">@Resources.groups</label>
                <div class="border border-dark">
                    <ul class="list-group ga-groups-ul pl-2" id="gaGroups">
                        @foreach (Department d in Model.Departments)
                        {
                            <li>
                                <input id="@d.DepId" name="DepId" type="radio" value="@d.DepId"> <a>@d.DepName</a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
            <span>Gewählte Gruppe: <b id="chosenGroup"></b></span>
            <button type="button" class="btn btn-primary btn-block mt-3" id="showNewGroupModalBtn">Neue Gruppe erstellen</button>
        </div>
        <div id="col2" class="col-md-3">
            <h4 class="text-center">Aktionen</h4>
            <label>Name</label>
            <div class="row mr-0 ml-0">
                <div class="col-10 p-0">
                    <input class="form-control rightNotRounded withoutBorder" id="groupNameInput" readonly type="text" />
                </div>
                <div class="col-2 p-0">
                    <button type="button" class="btn btn-info btn-block pb-0 pl-0 pr-0 leftNotRounded" onclick="editGroupName(this)"><i class="material-icons">&#xe150;</i></button>
                </div>
            </div>
            <span>
                <a>@Resources.count @Resources.Members:</a> <b id="countMembers">0</b>
            </span>


            <button type="button" class="btn btn-danger btn-block mt-2" onclick="deleteSelectedGroup()"><span class="d-flex justify-content-between"><span>Gruppe löschen</span><i class="material-icons">&#xe92b;</i></span></button>
            <hr />
            <button type="button" class="btn btn-primary btn-block mt-2" onclick="openMailDiv()"><span class="d-flex justify-content-between"><span>Mitglieder einladen</span><i id="inviteMatesIcon" class="material-icons">&#xe0d0;</i></span></button>

            <div id="mailAddressesBox" class="border border-dark mt-2">
                <div class="row mt-1 mb-1 mr-0 ml-0">
                    <div class="col-9 pr-0 pl-1"><input id="mailAddressInput" class="form-control rightNotRounded" type="text" placeholder="@Resources.addMailAddress" /></div>
                    <div class="col-3 pl-0 pr-1"><button type="button" class="btn btn-success btn-block pb-0 leftNotRounded" onclick="addMailAddress()"><i class="material-icons">&#xe148;</i></button></div>
                    <ul class="list-group w-100" id="mailAddressUL" name="Emails"></ul>

                </div>
            </div>

        </div>
        <div class="col-md-5 border-left" id="mailDiv">
            <h4 class="text-center">Infos</h4>

            <label>@Resources.subject</label>
            <input class="form-control" type="text" placeholder="@Resources.invitationToSimpleQ" name="InvitationSubject" />

            <label class="mt-2 mb-0">@Resources.content</label>
            <div id="textEditorDiv" class="textEditor"></div>
            <button type="submit" class="btn btn-primary btn-block mt-2" onclick="sendMails()"><span class="d-flex justify-content-between"><span>Email versenden</span><i id="openAddAnswerUpDownIcon" class="material-icons">&#xe0d0;</i></span></button>
            <input id="hiddenP" name="InvitationText" style="display:none"/>
        </div>
    </div>
}


@* Down here its modal code *@
<div class="modal" id="newGroupModal">
    <div class="modal-dialog">
        <div class="modal-content">

            <div class="modal-header">
                <h4 class="modal-title">New Group..</h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>

            <!-- Modal body -->
            <div class="modal-body">
                <label for="NewGroupTB">Name of the group</label>
                <input id="NewGroupTB" type="text" class="form-control" />
            </div>

            <!-- Modal footer -->
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal" onclick="addNewGroup()">Create</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Abort</button>
            </div>

        </div>
    </div>
</div>

<script>
    let groups = {};
    let chosenId = 0;
    let chosen;


    $(function () { // <-- Things to do at startup

        mailEditorStartup();

        @{
            foreach(Department d in Model.Departments)
            {
                @:groups['@d.DepId'] = ['@d.DepName', @d.People.Count]; 
            }
        }

        //choose first group automatically
        checkFirstElem();

        $("#gaGroups").on("click", "input[type = radio]", function () {
            handleCheckedAttributes(this);
            let text = this.parentElement.children[1].innerHTML;
            chosenId = this.value;
            updateGroupNameInput(text);
        });

        $("#showNewGroupModalBtn").click(function () {
            $("#newGroupModal").modal("show");
        });
    }); // <-- Things to to at startup END

    function checkFirstElem() {
        let radioBtnElem = document.getElementById("gaGroups").children[0].children[0];
        radioBtnElem.setAttribute("checked", "checked");
        radioBtnElem.click();
        updateGroupNameInput(radioBtnElem.parentElement.children[1].innerHTML); //fill into Textbox
        updateMemberCount(radioBtnElem.value);
    }

    function handleCheckedAttributes(elem) {
        let list = document.getElementById("gaGroups").children;

        for (let i = 0; i < list.length; i++) {
            if (list[i].children[0] !== elem) {
                list[i].children[0].removeAttribute("checked");
            }
        }
        elem.setAttribute("checked", "checked");
    }

    function addNewGroup() {
        let groupName = document.getElementById("NewGroupTB").value;

        if (groupName == "") {
            alert("@Resources.invalidInput");
            return;
        }

        let values = Object.values(groups);
        if (values.includes(groupName)) {
            alert('@Resources.groupAlreadyExists');
            return;
        }

        let url = '@Url.Action("Create", "GroupAdministration", new { depName = "temp"})'.replace("temp", groupName);

        $.get(
            url,
            function (id) {
                groups[id] = [groupName, 0];
                let groupsUl = document.getElementById("gaGroups");
                groupsUl.innerHTML +=
                    '<li>' +
                        '<input id="'+id+'" name="DepId" type="radio" value="' + id + '"><a>'+groupName+'</a>'+
                    '</li>';
                let elem = document.getElementById(id);
                handleCheckedAttributes(elem);
                updateGroupNameInput(groupName);
                updateMemberCount(id);
            }
        );
    }

    function updateGroupNameInput(groupName) {
        document.getElementById("groupNameInput").value = groupName;
        document.getElementById("chosenGroup").innerHTML = groupName;
    }

    function updateMemberCount(id) {
        document.getElementById("countMembers").innerHTML = groups[id][1];
    }

    if (typeof tempTextGroups === 'undefined') {
        let tempTextGroups;
    }

    function editGroupName(button) {
        //let input = document.getElementById("groupNameInput");
        $("#groupNameInput").removeClass("withoutBorder").removeAttr("readonly");
        let text = button.parentElement.parentElement.children[0].children[0].value;
        tempTextGroups = text;
        button.parentElement.parentElement.children[0].classList.remove("col-10");
        button.parentElement.parentElement.children[0].classList.add("col-8");
        button.parentElement.parentElement.children[1].classList.remove("col-2");
        button.parentElement.parentElement.children[1].classList.add("col-4");
        let edit =
            '       <span class="row ml-0 mr-0">' +
            '           <span class="col-6 p-0">' +
            '               <button type="button" class="btn btn-success btn-block m-0 pb-0 pl-0 pr-0 leftNotRounded rightNotRounded" onclick="saveGroup(this,false,\'' + text + '\')"><i class="material-icons">&#xe5ca;</i></button>' +
            '           </span>' +
            '           <span class="col-6 p-0">'  +
            '               <button type="button" class="btn btn-secondary btn-block m-0 pb-0 pl-0 pr-0 leftNotRounded" onclick="saveGroup(this,true,\'' + text + '\')"><i class="material-icons">&#xe5cd;</i></button>' +
            '           </span>' +
            '       </span>';
        button.parentElement.innerHTML = edit;
    }

    function saveGroup(button, canceled, tempText) {
        let text;
        if (canceled) {
            //text = tempTextGroups;
            document.getElementById("groupNameInput").value = tempTextGroups;
        } else {
            let id;
            let memCount;
            text = document.getElementById("groupNameInput").value;

            for (let key in groups) {
                if (groups[key][0] === tempText) {
                    id = key;
                    memCount = groups[key][1];
                }
                if (groups[key][0] === text) {
                    alert('@Resources.groupAlreadyExists');
                    return;
                }
            }
            let url = '@Url.Action("Modify", "GroupAdministration")'//, new {depId = "temp1", depName = "temp2"})'.replace("temp1", groups[tempTextGroups]).replace("temp2", text);
            url += '?depId=' + id + '&depName=' + text;
            $.get(
                url,
                function (id) { }  //unnecessary     
            );
            groups[id] = [text, memCount];
            let aElem = document.getElementById(id).parentElement.children[1];
            aElem.innerHTML = text;
        }
        $("#groupNameInput").attr("readonly", true);
        $("#groupNameInput").addClass("withoutBorder");

        button.parentElement.parentElement.parentElement.parentElement.children[0].classList.remove("col-8");
        button.parentElement.parentElement.parentElement.parentElement.children[0].classList.add("col-10");
        button.parentElement.parentElement.parentElement.parentElement.children[1].classList.remove("col-4");
        button.parentElement.parentElement.parentElement.parentElement.children[1].classList.add("col-2");

        let edited = '<button type="button" class="btn btn-info btn-block pb-0 pl-0 pr-0 leftNotRounded" onclick="editGroupName(this)"><i class="material-icons">&#xe150;</i></button>';
        tempTextGroups = "";
        button.parentElement.parentElement.parentElement.parentElement.children[1].innerHTML = edited;
    }

    function deleteSelectedGroup() {
        let id = $("input:checked").attr('id');

        let url = '@Url.Action("Delete", "GroupAdministration", new { depId = "temp"})'.replace("temp", id);
        $.get(
            url,
            function (id) {} //unnecessary
        );
        delete groups[id];
        document.getElementById(id).parentElement.remove();
        checkFirstElem();
    }

    function mailEditorStartup() {
        $("#mailDiv").hide();
        $("#mailAddressesBox").hide();
        $("#textEditorDiv").trumbowyg({
            lang: '@Resources.textEditorLanguage'
        });
        $('#mailDiv').trumbowyg('html', "<p>@Resources.downloadAppHere</p><a href='#'>https://play.google.com/store/apps/details?id=com.ubisoft.accovenant</a>");
    }

    function openMailDiv() {
        if ($("#mailDiv").is(":hidden")) {
            $("#col1").removeClass("col-md-4").addClass("col-md-3");
            $("#col2").removeClass("col-md-3").addClass("col-md-4");
            $("#mailDiv").show('slide', { direction: 'left' }, 500);
            $("#mailAddressesBox").show('slide', { direction: 'right' }, 500);

            document.getElementById("inviteMatesIcon").innerHTML = "&#xe020;";
        } else {
            $("#col2").removeClass("col-md-4").addClass("col-md-3");
            $("#col1").removeClass("col-md-3").addClass("col-md-4");
            $("#mailDiv").hide('slide', { direction: 'left' }, 500);
            $("#mailAddressesBox").hide('slide', { direction: 'right' }, 500);
            document.getElementById("inviteMatesIcon").innerHTML = "&#xe0d0;";
        }
    }

    let mailAddresses = [];

    function addMailAddress() {
        let ul = document.getElementById("mailAddressUL");
        let inputElem = document.getElementById("mailAddressInput");
        let input = inputElem.value;

        if (!validateEmail(input)) {
            alert('@Resources.invalidMailAddress');
            inputElem.value = '';
            return;
        }

        if (input === "") {
            alert('@Resources.invalidInput');
            return;
        } else if (mailAddresses.includes(input)) {
            alert('@Resources.invalidInput');
            return;
        }

        mailAddresses.push(input);
        let normal =
            '<li class="row mr-0 ml-0 mt-2">' +
            '    <div class="col-9 pr-0 pl-1">' +
            '        <input class="form-control rightNotRounded withoutBorder" name="Emails" readonly type="text" value="' + input + '" />' +
            '    </div>' +
            '    <div class="col-3 pl-0 pr-1">' +
            '       <span class="row ml-0 mr-0">' +
            '           <span class="col-6 p-0">' +
            '               <button type="button" class="btn btn-info btn-block m-0 pb-0 pl-0 pr-0 leftNotRounded rightNotRounded" onclick="editMailAddress(this)"><i class="material-icons">&#xe150;</i></button>' +
            '           </span>' +
            '           <span class="col-6 p-0">'  +
            '               <button type="button" class="btn btn-danger btn-block m-0 pb-0 pl-0 pr-0 leftNotRounded" onclick="deleteMailAddress(this)"><i class="material-icons">&#xe92b;</i></button>' +
            '           </span>' +
            '       </span>' +
            '    </div>' +
            '</li>';

        ul.innerHTML += normal;

        inputElem.value = "";
        $("#openAddAnswer").removeClass("btn-danger").addClass("btn-success");
    }

    function validateEmail(email) {
        var re = /^(([^<>()\[\]\\.,;:\s@@"]+(\.[^<>()\[\]\\.,;:\s@@"]+)*)|(".+"))@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return re.test(String(email).toLowerCase());
    }

    function deleteMailAddress(button) {
        let text = button.parentElement.parentElement.children[0].value;
        for (i = 0; i < mailAddresses.length; i++) {
            if (mailAddresses[i] === text) {
                mailAddresses.splice(i, 1);
                break;
            }
        }
        button.parentElement.parentElement.parentElement.parentElement.remove();
    }

    function editMailAddress(button) {
        let inputElem = button.parentElement.parentElement.parentElement.parentElement.children[0].children[0];
        $(inputElem).removeClass("withoutBorder").removeAttr("readonly");
        let text = button.parentElement.parentElement.parentElement.parentElement.children[0].children[0].value;
        let edit =
            '           <span class="col-6 p-0">' +
            '               <button type="button" class="btn btn-success btn-block m-0 pb-0 pl-0 pr-0 leftNotRounded rightNotRounded" onclick="saveMailAddress(this,false,\'' + text + '\')"><i class="material-icons">&#xe5ca;</i></button>' +
            '           </span>' +
            '           <span class="col-6 p-0">' +
            '               <button type="button" class="btn btn-secondary btn-block m-0 pb-0 pl-0 pr-0 leftNotRounded" onclick="saveMailAddress(this,true,\'' + text + '\')"><i class="material-icons">&#xe5cd;</i></button>' +
            '           </span>';
        button.parentElement.parentElement.innerHTML = edit;
    }

    function saveMailAddress(button, canceled, tempText) {
        let text;
        let inputElem = button.parentElement.parentElement.parentElement.parentElement.children[0].children[0];
        if (canceled) {
            text = tempText;
        } else {
            text = inputElem.value;
            if (!validateEmail(text)) {
                alert('@Resources.invalidMailAddress');
                inputElem.value = tempText;
                return;
            }
            if (mailAddresses.includes(text)) {
                alert('@Resources.invalidInput');
                return;
            }
            for (i = 0; i < mailAddresses.length; i++) {
                if (mailAddresses[i] === tempText) {
                    mailAddresses[i] = text;
                    break;
                }
            }
        }

        let edited =
            '<span class="col-6 p-0">' +
            '   <button type="button" class="btn btn-info btn-block m-0 pb-0 pl-0 pr-0 leftNotRounded rightNotRounded" onclick="editMailAddress(this)"><i class="material-icons">&#xe150;</i></button>' +
            '</span>' +
            '<span class="col-6 p-0">' +
            '   <button type="button" class="btn btn-danger btn-block m-0 pb-0 pl-0 pr-0 leftNotRounded" onclick="deleteMailAddress(this)"><i class="material-icons">&#xe92b;</i></button>' +
            '</span>';
        tempText = "";

        //take away input border and make it readonly
        $(inputElem).addClass("withoutBorder");
        $(inputElem).prop('readonly', true);
        button.parentElement.parentElement.innerHTML = edited;
    }

    function sendMails() {
        let hiddenElem = document.getElementById("hiddenP");
        //hiddenElem.innerHTML = $("#textEditorDiv").trumbowyg('html');
        hiddenElem.value = $("#textEditorDiv").trumbowyg('html');
    }

</script>