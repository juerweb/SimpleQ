@using SimpleQ.Webinterface.App_LocalResources;
@using SimpleQ.Webinterface.Models;
@model SimpleQ.Webinterface.Models.ViewModels.GroupAdministrationModel

<div class="row pl-4 mt-1 ml-0 mr-0">
    <h2>@Resources.groupAdministrationHeader</h2>
</div>
<div class="row mt-1 pl-3 ml-0 mr-0">
    <div class="col-md-4">
        <h4 class="text-center">Gruppenauswahl</h4>
        <div class="form-group mt-2 mb-1">
            <label for="groups">@Resources.groups</label>
            <div class="border border-dark">
                <ul class="list-group ga-groups-ul pl-2" id="gaGroups">
                    @foreach (Department d in Model.Departments)
                    {
                        <li>
                            <input name="groups" type="radio" value="@d.DepName">
                            @d.DepName
                        </li>
                    }
                </ul>
            </div>
        </div>
        <span>Gewählte Gruppe: <b id="chosenGroup"></b></span>
        <button type="button" class="btn btn-primary btn-block mt-3" id="showNewGroupModalBtn">Neue Gruppe erstellen</button>
    </div>
    <div class="col-md-4">
        <h4 class="text-center">Aktionen</h4>
        <label>Name</label>
        <div class="row mr-0 ml-0" id="newCategoryDiv">
            <div class="col-10 p-0">
                <input class="form-control rightNotRounded withoutBorder" id="groupNameInput" readonly type="text" value="IT Produktion" />
            </div>
            <div class="col-2 p-0">
                <button type="button" class="btn btn-success btn-block pb-0 pl-0 pr-0 leftNotRounded" onclick="editGroupName(this)"><i class="material-icons">&#xe150;</i></button>
            </div>
        </div>

        <canvas style="width: 100%; height: auto;" id="qrCodeDiv"></canvas>

        <button class="btn btn-primary btn-block mt-2">Mitglied hinzufügen</button>

    </div>
    <div class="col-md-4">
        <h4 class="text-center">Infos</h4>
    </div>
</div>



@* Down here its modal code *@
<div class="modal" id="newGroupModal">
    <div class="modal-dialog">
        <div class="modal-content">

            <div class="modal-header">
                <h4 class="modal-title">New Group..</h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>

            <!-- Modal body -->
            <div class="modal-body">
                <label for="NewGroupTB">Name of the group</label>
                <input id="NewGroupTB" type="text" class="form-control" />
            </div>

            <!-- Modal footer -->
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal" onclick="addNewGroup()">Create</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Abort</button>
            </div>

        </div>
    </div>
</div>

<script>
    let groups = [];

    $(function () { // <-- Things to do at startup

        //fill groups array
        @{
            foreach(Department d in Model.Departments)
            {
                @:groups.push('@d.DepName');
            }
        }

        //draw QR Code
        let QRC = new QRious({
            element: document.getElementById("qrCodeDiv"),
            value: '123456',
            level: 'H',
            size: 1000
        });

        //choose first group automatically
        let radioBtnElem = document.getElementById("gaGroups").children[0].children[0];
        radioBtnElem.setAttribute("checked", "checked");
        document.getElementById("chosenGroup").innerHTML = radioBtnElem.value;

        $("input[type=radio]").change(function () {
            let text = this.value;
            updateGroupNameInput(text);
            document.getElementById("chosenGroup").innerHTML = text;
        });

        $("#showNewGroupModalBtn").click(function () {
            $("#newGroupModal").modal("show");
        });
    }); // <-- Things to to at startup END


    function addNewGroup() {
        let groupName = document.getElementById("NewGroupTB").value;

        if (groupName == "") {
            alert("@Resources.invalidInput");
            return;
        }

        if (groups.includes(groupName)) {
            alert("@Resources.groupAlreadyExists");
            return;
        }

        let groupsUl = document.getElementById("gaGroups");
        groupsUl.innerHTML +=
            '<li>' +
                '<input name="groups" type="radio" value="' + groupName + '">' +
                groupName +
            '</li>';

        $("input[type=radio][value=" + groupName + "]").prop("checked", true);

        updateGroupNameInput(groupName);

        let url = '@Url.Action("Create", "GroupAdministration", new { depName = "temp"})'.replace("temp", groupName);

        $.ajax({
            url: url,
            type: 'GET'
        }); 
    }

    function updateGroupNameInput(groupName) {
        document.getElementById("groupNameInput").value = groupName;
    }

    function updateGroups() {
        @{
            foreach(Department d in Model.Departments)
            {
                @:groups.push('@d.DepName');
            }
        }
    }

    let tempTextGroups;
    function editGroupName(button) {
        //let input = document.getElementById("groupNameInput");
        $("#groupNameInput").removeClass("withoutBorder").removeAttr("readonly");
        let text = button.parentElement.parentElement.children[0].children[0].value;
        tempTextGroups = text;
        button.parentElement.parentElement.children[0].classList.remove("col-10");
        button.parentElement.parentElement.children[0].classList.add("col-8");
        button.parentElement.parentElement.children[1].classList.remove("col-2");
        button.parentElement.parentElement.children[1].classList.add("col-4");
        let edit =
            '       <span class="row ml-0 mr-0">' +
            '           <span class="col-6 p-0">' +
            '               <button type="button" class="btn btn-success btn-block m-0 pb-0 pl-0 pr-0 leftNotRounded rightNotRounded" onclick="saveGroup(this,false,\'' + text + '\')"><i class="material-icons">&#xe5ca;</i></button>' +
            '           </span>' +
            '           <span class="col-6 p-0">'  +
            '               <button type="button" class="btn btn-secondary btn-block m-0 pb-0 pl-0 pr-0 leftNotRounded" onclick="saveGroup(this,true,\'' + text + '\')"><i class="material-icons">&#xe5cd;</i></button>' +
            '           </span>' +
            '       </span>';
        button.parentElement.innerHTML = edit;
    }

    function saveGroup(button, canceled, tempText) {
        let text;
        if (canceled) {
            text = tempTextGroups;
        } else {
            text = button.parentElement.parentElement.children[0].value;
            if (groups.includes(text)) {
                alert('@Resources.invalidInput');
                return;
            }
            //luki action aufrufen
            // danach updateGroups() aufrufen!!
        }
        $("#groupNameInput").attr("readonly", true);
        $("#groupNameInput").addClass("withoutBorder");

        button.parentElement.parentElement.parentElement.parentElement.children[0].classList.remove("col-8");
        button.parentElement.parentElement.parentElement.parentElement.children[0].classList.add("col-10");
        button.parentElement.parentElement.parentElement.parentElement.children[1].classList.remove("col-4");
        button.parentElement.parentElement.parentElement.parentElement.children[1].classList.add("col-2");

        let edited = '<button type="button" class="btn btn-success btn-block pb-0 pl-0 pr-0 leftNotRounded" onclick="editGroupName(this)"><i class="material-icons">&#xe150;</i></button>';
        tempTextGroups = "";
        button.parentElement.parentElement.parentElement.parentElement.children[1].innerHTML = edited;

    }

</script>